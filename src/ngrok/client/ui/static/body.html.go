// +build release

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"reflect"
	"unsafe"
)

var _BodyHtml = ""+
"\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x31\x4f\xc3\x30"+
"\x10\x85\xf7\xfe\x8a\x53\x94\x11\x25\x1b\x03\x72\xbd\xc1\xc0\x84"+
"\xc4\x2f\x70\xeb\x2b\x09\xb8\x4e\x75\x0e\x45\x55\xd5\xff\xce\xdd"+
"\xb9\x8d\x13\x68\x26\xbf\xcb\x77\xef\xf9\xf9\x7c\x06\x8f\xbb\x3e"+
"\x22\x54\x9b\xc1\x9f\x2a\xb8\x5c\x56\x2b\x1e\xfe\xf4\x63\x07\xf5"+
"\x67\x1a\x22\x3c\xad\xa1\x73\xd1\x07\x7c\x15\xd5\x08\x01\xfc\x99"+
"\x03\xa1\x35\xdb\xc1\x23\x6c\x83\x4b\x69\x5d\x09\x5d\x59\x5e\xd6"+
"\xbd\xe6\x7d\x24\x66\x4d\x2b\x88\x35\xad\xe0\xba\xb8\x70\x6f\x9e"+
"\x89\x6e\x8e\xea\xea\xfb\xe3\xcd\xcf\x05\xa4\x71\x66\x98\x51\xd3"+
"\x32\x32\x39\x61\xf4\xb2\x5e\x4e\xe5\xf2\xbb\x81\xf6\xe5\xf2\x2f"+
"\xa2\xca\xe5\xbb\x47\xab\x93\x37\x47\x6e\x9f\x4c\xcb\x3a\xff\x18"+
"\xdd\x26\x4c\x8d\xb2\x38\x28\x53\x4d\x99\xe4\xe2\x07\x42\xfd\x85"+
"\xa7\x07\xa8\x8f\x2e\x7c\x63\x92\x9c\x1c\x38\xeb\x52\x50\x85\x94"+
"\xb9\xe2\x33\x2a\xa7\x92\x5d\x0c\xf2\xb0\xd3\xee\x9c\xa3\xb5\x59"+
"\xde\x61\xbc\x32\x39\x40\x29\xbf\xa4\x78\x32\xf3\x2e\xef\xf4\x5f"+
"\x31\x29\x75\xed\x9f\xc7\xbc\x1e\x7f\x03\x00\x00\xff\xff\xcb\xc6"+
"\x23\x16\x29\x02\x00\x00"

// BodyHtml returns raw, uncompressed file data.
func BodyHtml() []byte {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&_BodyHtml))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(_BodyHtml)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var buf bytes.Buffer
	io.Copy(&buf, gz)
	gz.Close()

	return buf.Bytes()
}
